import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:achpp/models/user.dart';
import 'package:achpp/models/subscription.dart';
import 'package:achpp/models/product.dart';
import 'package:achpp/models/news.dart';
import 'package:achpp/models/video.dart';
import 'package:achpp/models/meeting.dart';
import 'package:achpp/models/club.dart';
import 'package:achpp/models/course.dart';
import 'package:achpp/models/profile_response.dart';
import 'package:achpp/services/preload_service.dart';
import 'package:achpp/repositories/auth_repository.dart';
import 'package:achpp/repositories/news_repository.dart';
import 'package:achpp/repositories/video_repository.dart';
import 'package:achpp/repositories/meeting_repository.dart';

class HomeDigestScreen extends StatefulWidget {
  final User? user;
  final Subscription? subscription;
  final List<Product> products;
  final PreloadedData? preloadedData;

  const HomeDigestScreen({
    super.key,
    this.user,
    this.subscription,
    this.products = const [],
    this.preloadedData,
  });

  @override
  State<HomeDigestScreen> createState() => _HomeDigestScreenState();
}

class _HomeDigestScreenState extends State<HomeDigestScreen> {
  bool _isLoading = true;
  bool _isPremium = false;

  // Repositories
  final AuthRepository _authRepository = AuthRepository();
  final NewsRepository _newsRepository = NewsRepository();
  final VideoRepository _videoRepository = VideoRepository();
  final MeetingRepository _meetingRepository = MeetingRepository();
  
  // Data
  late News _latestNews;
  late Video _latestVideo;
  late Video _continueWatchingVideo;
  late Meeting _nextMeeting;
  late List<Club> _favoriteClubs;
  late List<Course> _favoriteCourses;
  late List<Meeting> _upcomingMeetings;
  late List<News> _recentNews;
  late List<Video> _continueWatchingList;
  late Map<int, Map<String, dynamic>> _videoProgress; // video_id -> progress data
  String? _unreadNotification;

  @override
  void initState() {
    super.initState();
    _initializeWithPreloadedData();
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å API
  void _initializeWithPreloadedData() {
    if (widget.preloadedData != null && widget.preloadedData!.isComplete && !widget.preloadedData!.isExpired) {
      print('‚úÖ HomeDigestScreen: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      _initializeFromPreloadedData(widget.preloadedData!);
    } else {
      print('üîÑ HomeDigestScreen: –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å API');
      _loadRealData();
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  void _initializeFromPreloadedData(PreloadedData data) {
    try {
      setState(() {
        _isLoading = false;

        // –ü–∞—Ä—Å–∏–º –ø—Ä–æ—Ñ–∏–ª—å
        final profileData = data.profileData!;
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∏–∂–µ

        // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
        final subscriptionData = data.subscriptionData!;
        final subscription = subscriptionData['subscription'];
        if (subscription != null) {
          _isPremium = subscription['status'] == 'active';
        }

        // –ü–∞—Ä—Å–∏–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        final favoritesData = data.favoritesData!;
        final favorites = _safeGetList(favoritesData, 'favorites');
        print('üìã HomeDigest: –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${favorites.length}');
        _initializeFavoritesFromApi(favorites);

        // –ü–∞—Ä—Å–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        final notificationsData = data.notificationsData!;
        final notifications = _safeGetList(notificationsData, 'notifications');
        final unreadNotifications = notifications.where((n) => n['read_at'] == null).toList();
        if (unreadNotifications.isNotEmpty) {
          _unreadNotification = unreadNotifications.first['message'] as String?;
        }

        // –ü–∞—Ä—Å–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
        final newsData = data.newsData!;
        final newsList = _safeGetList(newsData, 'news');
        if (newsList.isNotEmpty) {
          _latestNews = News.fromJson(newsList.first);
        } else {
          // Fallback –Ω–æ–≤–æ—Å—Ç—å –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
          _latestNews = News(
            id: 1,
            title: '–ù–æ–≤–æ—Å—Ç–∏ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è',
            slug: 'no-news',
            content: '–ù–æ–≤–æ—Å—Ç–∏ –ê–ß–ü–ü —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã',
            excerpt: '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏',
            imageUrl: null,
            type: 'news',
            typeLabel: '–ù–æ–≤–æ—Å—Ç—å',
            priority: 'normal',
            priorityLabel: '–û–±—ã—á–Ω—ã–π',
            priorityColor: '#6B7280',
            isFeatured: false,
            isPinned: false,
            publishedAt: DateTime.now(),
            formattedPublishedAt: null,
            author: null,
            isOrganizationAuthor: false,
            likesCount: 0,
            dislikesCount: 0,
            isLiked: false,
            isDisliked: false,
            viewsCount: 0,
            commentsCount: 0,
            createdAt: DateTime.now(),
            updatedAt: DateTime.now(),
          );
        }

        // –ü–∞—Ä—Å–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ
        final videoData = data.videoData!;
        if (videoData['video'] != null) {
          _latestVideo = Video.fromJson(videoData['video']);
        } else {
          // Fallback –≤–∏–¥–µ–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
          _latestVideo = Video(
            id: 1,
            title: '–í–∏–¥–µ–æ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è',
            slug: 'no-video',
            description: '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏',
            videoUrl: null,
            videoId: null,
            thumbnailUrl: null,
            durationMinutes: 0,
            actualDuration: 0,
            formattedDuration: '00:00',
            viewCount: 0,
            isFree: true,
            canWatch: true,
            videoFolder: null,
            publishedAt: null,
            createdAt: DateTime.now(),
            updatedAt: DateTime.now(),
            likesCount: 0,
            dislikesCount: 0,
            isLikedByUser: false,
            isDislikedByUser: false,
            status: 'draft',
            sortOrder: 0,
            tags: const [],
            notes: null,
            metaTitle: null,
            metaDescription: null,
          );
        }

        // –ü–∞—Ä—Å–∏–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        final watchHistoryData = data.watchHistoryData!;
        final videosList = _safeGetList(watchHistoryData, 'videos');
        _continueWatchingList = videosList.map((v) => Video.fromJson(v)).toList();
        if (_continueWatchingList.isNotEmpty) {
          _continueWatchingVideo = _continueWatchingList.first;
        } else {
          // Fallback –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
          _continueWatchingVideo = _latestVideo;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–∏–¥–µ–æ
        _videoProgress = {};

        // –ü–∞—Ä—Å–∏–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏
        final meetingsData = data.meetingsData!;
        final meetingsList = _safeGetList(meetingsData, 'meetings');
        _upcomingMeetings = meetingsList.map((m) => Meeting.fromJson(m)).toList();
        if (_upcomingMeetings.isNotEmpty) {
          _nextMeeting = _upcomingMeetings.first;
        } else {
          // Fallback –≤—Å—Ç—Ä–µ—á–∞ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
          _nextMeeting = Meeting(
            id: 1,
            name: '–í—Å—Ç—Ä–µ—á–∏ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è',
            slug: 'no-meetings',
            description: '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –ê–ß–ü–ü',
            image: null,
            date: DateTime.now().add(const Duration(days: 7)).toIso8601String(),
            formattedDate: '–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é',
            startTime: DateTime.now().add(const Duration(days: 7)).toIso8601String(),
            endTime: DateTime.now().add(const Duration(days: 7, hours: 1)).toIso8601String(),
            formattedStartTime: '10:00',
            formattedEndTime: '11:00',
            duration: '1 —á–∞—Å',
            format: 'online',
            formatLabel: '–û–Ω–ª–∞–π–Ω',
            platform: 'Zoom',
            joinUrl: null,
            location: null,
            maxParticipants: 100,
            status: 'upcoming',
            statusLabel: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è',
            notes: null,
            organizer: null,
            category: null,
            participantsCount: 0,
            commentsCount: 0,
            isUpcoming: true,
            isPast: false,
            isToday: false,
            isOrganizer: false,
            isFavoritedByUser: false,
            likesCount: 0,
            isLiked: false,
            speakers: null,
            createdAt: DateTime.now(),
            updatedAt: DateTime.now(),
          );
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (–ø—É—Å—Ç–æ–π, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å)
        _recentNews = [];

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏
        _initializeFallbackData();
      });

      print('‚úÖ HomeDigestScreen: –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏');

    } catch (e) {
      print('‚ùå HomeDigestScreen: –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: $e');
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—ã—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
      _loadRealData();
    }
  }

  Future<void> _loadRealData() async {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      final results = await Future.wait([
        _authRepository.getProfile(),
        _authRepository.getCurrentSubscription(),
        _authRepository.getFavorites(),
        _authRepository.getNotifications(perPage: 5),
        _newsRepository.getFeaturedNews(limit: 1),
        _videoRepository.getLatestVideo(),
        _authRepository.getWatchHistory(limit: 3),
        _meetingRepository.getUpcomingMeetings(limit: 3),
      ]);

      if (mounted) {
        setState(() {
          _isLoading = false;

          // –ü–∞—Ä—Å–∏–º –ø—Ä–æ—Ñ–∏–ª—å
          results[0] as ProfileData;

          // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
          final subscriptionData = results[1] as Map<String, dynamic>;
          final subscription = subscriptionData['subscription'];
          _isPremium = subscription != null && subscription['status'] == 'active';

          // –ü–∞—Ä—Å–∏–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
          final favoritesData = results[2] as Map<String, dynamic>;
          final favorites = _safeGetList(favoritesData, 'favorites');
          print('üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${favorites.length}');
          _initializeFavoritesFromApi(favorites);

          // –ü–∞—Ä—Å–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          final notificationsData = results[3] as Map<String, dynamic>;
          final notifications = _safeGetList(notificationsData, 'notifications');
          final unreadNotifications = notifications.where((n) => n['read_at'] == null).toList();
          if (unreadNotifications.isNotEmpty) {
            _unreadNotification = unreadNotifications.first['message'] as String?;
          }

          // –ü–∞—Ä—Å–∏–º –Ω–æ–≤–æ—Å—Ç–∏
          final newsData = results[4] as Map<String, dynamic>;
          final newsList = _safeGetList(newsData, 'news');
          if (newsList.isNotEmpty) {
            _latestNews = News.fromJson(newsList.first as Map<String, dynamic>);
          } else {
            _initializeFallbackNews();
          }

          // –ü–∞—Ä—Å–∏–º –≤–∏–¥–µ–æ
          final latestVideoData = results[5] as Map<String, dynamic>;
          final videosList = _safeGetList(latestVideoData, 'videos');
          if (videosList.isNotEmpty) {
            _latestVideo = Video.fromJson(videosList.first as Map<String, dynamic>);
          } else {
            _initializeFallbackVideo();
          }

          // –ü–∞—Ä—Å–∏–º –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è (–∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)
          final continueWatchingData = results[6] as Map<String, dynamic>;
          final continueVideosList = _safeGetList(continueWatchingData, 'videos');
          _continueWatchingList = [];
          _videoProgress = {};

          for (final videoData in continueVideosList) {
            final video = Video.fromJson(videoData as Map<String, dynamic>);
            _continueWatchingList.add(video);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            if (videoData.containsKey('progress_seconds')) {
              _videoProgress[video.id] = {
                'progress_seconds': videoData['progress_seconds'] ?? 0,
                'completed': videoData['completed'] ?? false,
                'progress_percentage': videoData['progress_percentage'] ?? 0.0,
                'last_watched_at': videoData['last_watched_at'],
              };
            }
          }

          // –ü–∞—Ä—Å–∏–º –≤—Å—Ç—Ä–µ—á–∏
          final meetingsData = results[7] as Map<String, dynamic>;
          final meetingsList = _safeGetList(meetingsData, 'meetings');
          _upcomingMeetings = meetingsList
              .map((meeting) => Meeting.fromJson(meeting as Map<String, dynamic>))
              .toList();

          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
          _initializeFallbackData();
        });
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
      if (mounted) {
        setState(() {
          _isLoading = false;
          _isPremium = widget.subscription?.status == 'active';
          _initializeMockData();
        });
      }
    }
  }

  void _initializeMockData() {
    // Mock latest news
    _latestNews = News(
      id: 1,
      title: '–ù–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –ê–ß–ü–ü',
      slug: 'new-platform-changes',
      content: '–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...',
      excerpt: '–ú—ã —Ä–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –≤ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ...',
      imageUrl: null,
      type: 'announcement',
      typeLabel: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ',
      priority: 'high',
      priorityLabel: '–í—ã—Å–æ–∫–∏–π',
      priorityColor: '#EF4444',
      isFeatured: true,
      isPinned: false,
      publishedAt: DateTime.now().subtract(const Duration(hours: 2)),
      formattedPublishedAt: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥',
      author: widget.user,
      isOrganizationAuthor: true,
      likesCount: 15,
      dislikesCount: 0,
      isLiked: false,
      isDisliked: false,
      viewsCount: 234,
      commentsCount: 8,
      createdAt: DateTime.now().subtract(const Duration(hours: 2)),
      updatedAt: DateTime.now().subtract(const Duration(hours: 2)),
    );

    // Mock latest video
    _latestVideo = Video(
      id: 1,
      title: '–†–∞–±–æ—Ç–∞ —Å —Ç—Ä–µ–≤–æ–∂–Ω—ã–º–∏ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏',
      slug: 'anxiety-disorders-treatment',
      description: '–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞–∑–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–≤–æ–∂–Ω—ã–º–∏ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏',
      videoUrl: 'https://example.com/video1.mp4',
      videoId: 'video1',
      thumbnailUrl: null,
      durationMinutes: 45,
      actualDuration: 2700,
      formattedDuration: '45 –º–∏–Ω',
      viewCount: 156,
      isFree: false,
      canWatch: _isPremium,
      publishedAt: DateTime.now().subtract(const Duration(days: 1)),
      createdAt: DateTime.now().subtract(const Duration(days: 1)),
      updatedAt: DateTime.now().subtract(const Duration(days: 1)),
    );

    // Mock continue watching video
    _continueWatchingVideo = Video(
      id: 2,
      title: '–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è',
      slug: 'cbt-therapy',
      description: '–û—Å–Ω–æ–≤—ã –ö–ü–¢ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤',
      videoUrl: 'https://example.com/video2.mp4',
      videoId: 'video2',
      thumbnailUrl: null,
      durationMinutes: 60,
      actualDuration: 3600,
      formattedDuration: '1 —á',
      viewCount: 89,
      isFree: false,
      canWatch: _isPremium,
      publishedAt: DateTime.now().subtract(const Duration(days: 3)),
      createdAt: DateTime.now().subtract(const Duration(days: 3)),
      updatedAt: DateTime.now().subtract(const Duration(days: 3)),
    );

    // Mock next meeting
    _nextMeeting = Meeting(
      id: 1,
      name: '–†–∞–∑–±–æ—Ä –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤',
      slug: 'clinical-cases-review',
      description: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤',
      image: null,
      date: DateTime.now().add(const Duration(hours: 2)).toIso8601String(),
      formattedDate: '–°–µ–≥–æ–¥–Ω—è',
      startTime: DateTime.now().add(const Duration(hours: 2)).toIso8601String(),
      endTime: DateTime.now().add(const Duration(hours: 3)).toIso8601String(),
      formattedStartTime: '19:00',
      formattedEndTime: '20:00',
      duration: '1 —á–∞—Å',
      format: 'online',
      formatLabel: '–û–Ω–ª–∞–π–Ω',
      platform: 'Zoom',
      joinUrl: _isPremium ? 'https://zoom.us/j/123456789' : null,
      location: null,
      maxParticipants: 50,
      status: 'upcoming',
      statusLabel: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è',
      organizer: widget.user,
      participantsCount: 23,
      commentsCount: 5,
      isUpcoming: true,
      isPast: false,
      isToday: true,
      isOrganizer: false,
      isFavoritedByUser: true,
      likesCount: 12,
      isLiked: false,
      speakers: '–î—Ä. –ò–≤–∞–Ω–æ–≤ –ê.–ê.',
      createdAt: DateTime.now().subtract(const Duration(days: 7)),
      updatedAt: DateTime.now().subtract(const Duration(days: 1)),
    );

    // Mock favorite clubs
    _favoriteClubs = [
      Club(
        id: 1,
        name: '–ö–ü–¢-–∫–ª—É–±',
        slug: 'cbt-club',
        description: '–ö–ª—É–± –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π —Ç–µ—Ä–∞–ø–∏–∏',
        image: null,
        zoomLink: _isPremium ? 'https://zoom.us/j/club1' : null,
        materialsFolderUrl: null,
        autoMaterials: false,
        currentDonations: 15000.0,
        formattedCurrentDonations: '15 000 ‚ÇΩ',
        status: 'active',
        productLevel: 2,
        owner: widget.user,
        isFavoritedByUser: true,
        createdAt: DateTime.now().subtract(const Duration(days: 30)),
        updatedAt: DateTime.now().subtract(const Duration(days: 1)),
        speakers: '–î—Ä. –ü–µ—Ç—Ä–æ–≤ –í.–í.',
      ),
      Club(
        id: 2,
        name: '–ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–ª—É–±',
        slug: 'psychoanalytic-club',
        description: '–£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑–∞',
        image: null,
        zoomLink: _isPremium ? 'https://zoom.us/j/club2' : null,
        materialsFolderUrl: null,
        autoMaterials: true,
        currentDonations: 8500.0,
        formattedCurrentDonations: '8 500 ‚ÇΩ',
        status: 'active',
        productLevel: 3,
        owner: widget.user,
        isFavoritedByUser: true,
        createdAt: DateTime.now().subtract(const Duration(days: 45)),
        updatedAt: DateTime.now().subtract(const Duration(days: 2)),
        speakers: '–î—Ä. –°–∏–¥–æ—Ä–æ–≤–∞ –ï.–ò.',
      ),
    ];

    // Mock favorite courses
    _favoriteCourses = [
      Course(
        id: 1,
        title: '–ö—É—Ä—Å –ø–æ —Ä–∞–±–æ—Ç–µ —Å –¥–µ–ø—Ä–µ—Å—Å–∏–µ–π',
        slug: 'depression-treatment-course',
        description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∫—É—Ä—Å –ø–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –∏ –ª–µ—á–µ–Ω–∏—é –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤',
        shortDescription: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –ª–µ—á–µ–Ω–∏–µ –¥–µ–ø—Ä–µ—Å—Å–∏–∏',
        image: null,
        maxParticipants: 30,
        publishedAt: DateTime.now().subtract(const Duration(days: 15)),
        formattedPublishedAt: '15 –¥–Ω–µ–π –Ω–∞–∑–∞–¥',
        zoomLink: _isPremium ? 'https://zoom.us/j/course1' : null,
        materialsFolderUrl: null,
        autoMaterials: true,
        productLevel: 2,
        isHidden: false,
        isFavoritedByUser: true,
        createdAt: DateTime.now().subtract(const Duration(days: 15)),
        updatedAt: DateTime.now().subtract(const Duration(days: 3)),
        contentCount: 12,
      ),
    ];

    // Mock upcoming meetings
    _upcomingMeetings = [
      _nextMeeting,
      Meeting(
        id: 2,
        name: '–°—É–ø–µ—Ä–≤–∏–∑–∏—è –ø–æ —Å–µ–º–µ–π–Ω–æ–π —Ç–µ—Ä–∞–ø–∏–∏',
        slug: 'family-therapy-supervision',
        description: '–ì—Ä—É–ø–ø–æ–≤–∞—è —Å—É–ø–µ—Ä–≤–∏–∑–∏—è –¥–ª—è —Å–µ–º–µ–π–Ω—ã—Ö —Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–≤',
        image: null,
        date: DateTime.now().add(const Duration(days: 1)).toIso8601String(),
        formattedDate: '–ó–∞–≤—Ç—Ä–∞',
        startTime: DateTime.now().add(const Duration(days: 1, hours: 18)).toIso8601String(),
        endTime: DateTime.now().add(const Duration(days: 1, hours: 20)).toIso8601String(),
        formattedStartTime: '18:00',
        formattedEndTime: '20:00',
        duration: '2 —á–∞—Å–∞',
        format: 'online',
        formatLabel: '–û–Ω–ª–∞–π–Ω',
        platform: 'Zoom',
        joinUrl: _isPremium ? 'https://zoom.us/j/987654321' : null,
        location: null,
        maxParticipants: 25,
        status: 'upcoming',
        statusLabel: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è',
        organizer: widget.user,
        participantsCount: 18,
        commentsCount: 3,
        isUpcoming: true,
        isPast: false,
        isToday: false,
        isOrganizer: false,
        isFavoritedByUser: true,
        likesCount: 8,
        isLiked: false,
        speakers: '–î—Ä. –ö–æ–∑–ª–æ–≤–∞ –ú.–°.',
        createdAt: DateTime.now().subtract(const Duration(days: 5)),
        updatedAt: DateTime.now().subtract(const Duration(days: 1)),
      ),
    ];

    // Mock recent news
    _recentNews = [
      _latestNews,
      News(
        id: 2,
        title: '–ù–æ–≤—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ –≤ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏',
        slug: 'new-therapy-methods',
        content: '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –Ω–æ–≤–æ—Å—Ç–∏...',
        excerpt: '–û–±–∑–æ—Ä —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –≤ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏...',
        imageUrl: null,
        type: 'article',
        typeLabel: '–°—Ç–∞—Ç—å—è',
        priority: 'medium',
        priorityLabel: '–°—Ä–µ–¥–Ω–∏–π',
        priorityColor: '#F59E0B',
        isFeatured: false,
        isPinned: false,
        publishedAt: DateTime.now().subtract(const Duration(days: 1)),
        formattedPublishedAt: '1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥',
        author: widget.user,
        isOrganizationAuthor: false,
        likesCount: 7,
        dislikesCount: 1,
        isLiked: false,
        isDisliked: false,
        viewsCount: 89,
        commentsCount: 3,
        createdAt: DateTime.now().subtract(const Duration(days: 1)),
        updatedAt: DateTime.now().subtract(const Duration(days: 1)),
      ),
    ];

    // Mock continue watching list
    _continueWatchingList = [
      _continueWatchingVideo,
      Video(
        id: 3,
        title: '–ì—Ä—É–ø–ø–æ–≤–∞—è —Ç–µ—Ä–∞–ø–∏—è: –æ—Å–Ω–æ–≤—ã',
        slug: 'group-therapy-basics',
        description: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤—É—é —Ç–µ—Ä–∞–ø–∏—é',
        videoUrl: 'https://example.com/video3.mp4',
        videoId: 'video3',
        thumbnailUrl: null,
        durationMinutes: 30,
        actualDuration: 1800,
        formattedDuration: '30 –º–∏–Ω',
        viewCount: 67,
        isFree: false,
        canWatch: _isPremium,
        publishedAt: DateTime.now().subtract(const Duration(days: 5)),
        createdAt: DateTime.now().subtract(const Duration(days: 5)),
        updatedAt: DateTime.now().subtract(const Duration(days: 5)),
      ),
    ];

    // Mock unread notification
    _unreadNotification = _isPremium ? '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ "–†–∞–∑–±–æ—Ä –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤"' : null;
  }

  void _initializeFavoritesFromApi(List<dynamic> favorites) {
    _favoriteClubs = [];
    _favoriteCourses = [];

    print('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ ${favorites.length} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤');

    for (final favorite in favorites) {
      final favorable = favorite['favorable'] as Map<String, dynamic>;
      final favorableType = favorite['favorable_type'] as String;

      print('üìù –¢–∏–ø: $favorableType, ID: ${favorable['id']}');

      if (favorableType == 'App\\Models\\Club') {
        try {
          _favoriteClubs.add(Club.fromJson(favorable));
          print('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–ª—É–±: ${favorable['name'] ?? favorable['title']}');
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–ª—É–±–∞: $e');
        }
      } else if (favorableType == 'App\\Models\\Course') {
        try {
          _favoriteCourses.add(Course.fromJson(favorable));
          print('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫—É—Ä—Å: ${favorable['title'] ?? favorable['name']}');
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—É—Ä—Å–∞: $e');
        }
      }
    }

    print('üìä –ò—Ç–æ–≥–æ: ${_favoriteClubs.length} –∫–ª—É–±–æ–≤, ${_favoriteCourses.length} –∫—É—Ä—Å–æ–≤');
  }

  void _initializeFallbackNews() {
    _latestNews = News(
      id: 1,
      title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
      slug: 'welcome',
      content: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ê–ß–ü–ü',
      excerpt: '–ù–∞—á–Ω–∏—Ç–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π',
      imageUrl: null,
      type: 'announcement',
      typeLabel: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ',
      priority: 'normal',
      priorityLabel: '–û–±—ã—á–Ω—ã–π',
      priorityColor: '#6B7280',
      isFeatured: true,
      isPinned: false,
      publishedAt: DateTime.now(),
      formattedPublishedAt: '–¢–æ–ª—å–∫–æ —á—Ç–æ',
      author: widget.user,
      isOrganizationAuthor: true,
      likesCount: 0,
      dislikesCount: 0,
      isLiked: false,
      isDisliked: false,
      viewsCount: 1,
      commentsCount: 0,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );
  }

  void _initializeFallbackVideo() {
    _latestVideo = Video(
      id: 1,
      title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
      slug: 'welcome-video',
      description: '–ù–∞—á–Ω–∏—Ç–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π',
      videoUrl: null,
      videoId: 'welcome',
      thumbnailUrl: null,
      durationMinutes: 1,
      actualDuration: 60,
      formattedDuration: '1 –º–∏–Ω',
      viewCount: 0,
      isFree: true,
      canWatch: true,
      publishedAt: DateTime.now(),
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );
  }

  void _initializeFallbackData() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤—ã –ø—É—Å—Ç—ã–µ
    if (_favoriteClubs.isEmpty) {
      _favoriteClubs = [];
    }
    if (_favoriteCourses.isEmpty) {
      _favoriteCourses = [];
    }
    if (_upcomingMeetings.isEmpty) {
      _upcomingMeetings = [];
    }
    if (_continueWatchingList.isEmpty) {
      _continueWatchingList = [_latestVideo];
    }
    if (_videoProgress.isEmpty) {
      _videoProgress = {};
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º _continueWatchingVideo –∫–∞–∫ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –∏–∑ —Å–ø–∏—Å–∫–∞
    if (_continueWatchingList.isNotEmpty) {
      _continueWatchingVideo = _continueWatchingList.first;
    } else {
      _continueWatchingVideo = _latestVideo;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º _nextMeeting –∫–∞–∫ –ø–µ—Ä–≤—É—é –≤—Å—Ç—Ä–µ—á—É –∏–ª–∏ fallback
    if (_upcomingMeetings.isNotEmpty) {
      _nextMeeting = _upcomingMeetings.first;
    } else {
      _nextMeeting = Meeting(
        id: 1,
        name: '–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è',
        slug: 'no-meetings',
        description: '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏',
        image: null,
        date: DateTime.now().add(const Duration(days: 7)).toIso8601String(),
        formattedDate: '–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é',
        startTime: DateTime.now().add(const Duration(days: 7)).toIso8601String(),
        endTime: DateTime.now().add(const Duration(days: 7, hours: 1)).toIso8601String(),
        formattedStartTime: '10:00',
        formattedEndTime: '11:00',
        duration: '1 —á–∞—Å',
        format: 'online',
        formatLabel: '–û–Ω–ª–∞–π–Ω',
        platform: 'Zoom',
        joinUrl: null,
        location: null,
        maxParticipants: 100,
        status: 'upcoming',
        statusLabel: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è',
        organizer: widget.user,
        participantsCount: 0,
        commentsCount: 0,
        isUpcoming: true,
        isPast: false,
        isToday: false,
        isOrganizer: false,
        isFavoritedByUser: false,
        likesCount: 0,
        isLiked: false,
        speakers: '',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );
    }

    _recentNews = [_latestNews];
  }

  String _formatProgressTime(int seconds) {
    final hours = seconds ~/ 3600;
    final minutes = (seconds % 3600) ~/ 60;
    final remainingSeconds = seconds % 60;

    if (hours > 0) {
      return '${hours.toString().padLeft(2, '0')}:${minutes.toString().padLeft(2, '0')}:${remainingSeconds.toString().padLeft(2, '0')}';
    } else {
      return '${minutes.toString().padLeft(2, '0')}:${remainingSeconds.toString().padLeft(2, '0')}';
    }
  }

  String _getVideoProgressText(int videoId) {
    final progress = _videoProgress[videoId];
    if (progress != null && progress['progress_seconds'] != null) {
      final progressSeconds = progress['progress_seconds'] as int;
      final completed = progress['completed'] as bool? ?? false;

      if (completed) {
        return '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ';
      } else {
        return _formatProgressTime(progressSeconds);
      }
    }
    return '–ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ';
  }

  List<dynamic> _safeGetList(Map<String, dynamic> data, String key) {
    final value = data[key];
    if (value is List<dynamic>) {
      return value;
    }
    print('‚ö†Ô∏è –û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤ –¥–ª—è –∫–ª—é—á–∞ "$key", –Ω–æ –ø–æ–ª—É—á–µ–Ω: ${value.runtimeType}');
    return [];
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return const Center(
        child: CircularProgressIndicator(
          valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF8B5CF6)),
        ),
      );
    }

    return SingleChildScrollView(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          
          // Unread Notification
          if (_unreadNotification != null) _buildNotificationCard(),
          
          // Favorite Clubs & Courses
          if (_favoriteClubs.isNotEmpty || _favoriteCourses.isNotEmpty)
            _buildFavoritesSection(),
          
          // Upcoming Meetings
          if (_upcomingMeetings.isNotEmpty) _buildUpcomingMeetings(),
          
          // Continue Watching
          if (_isPremium) _buildContinueWatching(),
          
          // Latest News
          _buildLatestNews(),
          
          // Recent News
          _buildRecentNews(),
          
          const SizedBox(height: 20),
        ],
      ),
    );
  }


  Widget _buildNotificationCard() {
    return Container(
      margin: const EdgeInsets.all(16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: const Color(0xFF2D2D2D),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: const Color(0xFF8B5CF6), width: 1),
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: const Color(0xFF8B5CF6),
              borderRadius: BorderRadius.circular(8),
            ),
            child: const Icon(Icons.notifications, color: Colors.white, size: 20),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 14,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  _unreadNotification!,
                  style: const TextStyle(
                    color: Colors.grey,
                    fontSize: 12,
                  ),
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
              ],
            ),
          ),
          IconButton(
            onPressed: () {
              setState(() {
                _unreadNotification = null;
              });
            },
            icon: const Icon(Icons.close, color: Colors.grey, size: 20),
          ),
        ],
      ),
    );
  }

  Widget _buildFavoritesSection() {
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
    final allFavorites = <Map<String, dynamic>>[];

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—É–±—ã
    for (final club in _favoriteClubs) {
      allFavorites.add({
        'type': 'club',
        'item': club,
        'created_at': club.createdAt?.toIso8601String() ?? DateTime.now().toIso8601String(),
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã
    for (final course in _favoriteCourses) {
      allFavorites.add({
        'type': 'course',
        'item': course,
        'created_at': course.createdAt?.toIso8601String() ?? DateTime.now().toIso8601String(),
      });
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
    allFavorites.sort((a, b) => DateTime.parse(b['created_at']).compareTo(DateTime.parse(a['created_at'])));

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Padding(
          padding: EdgeInsets.all(16.0),
          child: Text(
            '–ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ',
            style: TextStyle(
              color: Colors.white,
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        if (allFavorites.isEmpty)
          const Padding(
            padding: EdgeInsets.symmetric(horizontal: 16.0),
            child: Center(
              child: Text(
                '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
                style: TextStyle(color: Colors.grey),
              ),
            ),
          )
        else
          ListView.builder(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            padding: const EdgeInsets.symmetric(horizontal: 16.0),
            itemCount: allFavorites.length,
            itemBuilder: (context, index) {
              final favorite = allFavorites[index];
              return _buildFavoriteCard(favorite);
            },
          ),
      ],
    );
  }


  Widget _buildFavoriteCard(Map<String, dynamic> favorite) {
    final type = favorite['type'] as String;
    final item = favorite['item'];
    final createdAt = favorite['created_at'] as String;

    String title = '';
    String subtitle = '';
    IconData icon = Icons.favorite;
    Color cardColor = const Color(0xFF2D2D2D);

    String? description;
    String? zoomLink;
    Map<String, dynamic>? nextMeeting;
    Map<String, dynamic>? nextContent;

    if (type == 'club') {
      final club = item as Club;
      title = club.name;
      subtitle = '–ö–ª—É–±';
      icon = Icons.group;
      description = club.description;
      zoomLink = club.zoomLink;
      // –î–ª—è –∫–ª—É–±–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º nextMeeting –∫–∞–∫ Map
      if (club.nextMeeting != null) {
        nextMeeting = {
          'name': '–í—Å—Ç—Ä–µ—á–∞ –∫–ª—É–±–∞', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
          'date': club.nextMeeting!.date,
          'start_time': club.nextMeeting!.startTime,
          'end_time': club.nextMeeting!.endTime,
          'speakers': club.nextMeeting!.speakers,
        };
      }
    } else if (type == 'course') {
      final course = item as Course;
      title = course.title;
      subtitle = '–ö—É—Ä—Å';
      icon = Icons.school;
      description = course.shortDescription;
      zoomLink = course.zoomLink;
      // –î–ª—è –∫—É—Ä—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º nextContent –∫–∞–∫ Map
      if (course.nextContent != null) {
        nextContent = {
          'title': course.nextContent!.title,
          'date': course.nextContent!.date,
          'start_time': course.nextContent!.startTime,
          'end_time': course.nextContent!.endTime,
          'speakers': course.nextContent!.speakers,
        };
      }
    }

    String? nextLine;
    String? nextTitle;
    String? speakers;
    if (nextMeeting != null && nextMeeting.isNotEmpty) {
      final date = nextMeeting['date']?.toString();
      final start = nextMeeting['start_time']?.toString();
      final end = nextMeeting['end_time']?.toString();
      nextLine = _formatEventDateTime(date, start, end);
      nextTitle = nextMeeting['name']?.toString();
      speakers = nextMeeting['speakers']?.toString();
    } else if (nextContent != null && nextContent.isNotEmpty) {
      final titleC = nextContent['title']?.toString();
      final date = nextContent['date']?.toString();
      final start = nextContent['start_time']?.toString();
      final end = nextContent['end_time']?.toString();
      nextLine = _formatEventDateTime(date, start, end);
      nextTitle = titleC;
      speakers = nextContent['speakers']?.toString();
    }

    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: cardColor,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: Colors.grey[800]!),
      ),
      child: InkWell(
        borderRadius: BorderRadius.circular(16),
        onTap: () {
          if (type == 'club') {
            _openClub(item as Club);
          } else if (type == 'course') {
            _openCourse(item as Course);
          }
        },
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–∏–ø
              Row(
                children: [
                  Container(
                    width: 40,
                    height: 40,
                    decoration: BoxDecoration(
                      color: const Color(0xFF6B46C1).withAlpha(51),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Icon(icon, color: const Color(0xFF6B46C1), size: 20),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          title,
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        const SizedBox(height: 2),
                        Text(
                          subtitle,
                          style: TextStyle(
                            color: Colors.grey[400],
                            fontSize: 12,
                          ),
                        ),
                      ],
                    ),
                  ),
                  const Icon(
                    Icons.arrow_forward_ios,
                    size: 16,
                    color: Colors.grey,
                  ),
                ],
              ),

              // –û–ø–∏—Å–∞–Ω–∏–µ
              if (description != null && description.isNotEmpty) ...[
                const SizedBox(height: 12),
                Text(
                  _stripHtmlTags(description),
                  maxLines: 3,
                  overflow: TextOverflow.ellipsis,
                  style: TextStyle(
                    fontSize: 13,
                    color: Colors.grey[300],
                    height: 1.4,
                  ),
                ),
              ],

              // –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
              if (nextTitle != null && nextTitle.isNotEmpty) ...[
                const SizedBox(height: 12),
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: const Color(0xFF6B46C1).withAlpha(25),
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: const Color(0xFF6B46C1).withAlpha(77)),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          const Icon(Icons.schedule, size: 16, color: Color(0xFF6B46C1)),
                          const SizedBox(width: 6),
                          Text(
                            '–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ',
                            style: TextStyle(
                              color: const Color(0xFF6B46C1),
                              fontWeight: FontWeight.w600,
                              fontSize: 12,
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 6),
                      Text(
                        nextTitle,
                        style: const TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.w500,
                          fontSize: 14,
                        ),
                      ),
                      if (nextLine != null && nextLine.isNotEmpty) ...[
                        const SizedBox(height: 4),
                        Text(
                          nextLine,
                          style: TextStyle(
                            color: Colors.grey[400],
                            fontSize: 12,
                          ),
                        ),
                      ],
                      if (speakers != null && speakers.isNotEmpty) ...[
                        const SizedBox(height: 4),
                        Row(
                          children: [
                            const Icon(Icons.person, size: 12, color: Colors.grey),
                            const SizedBox(width: 4),
                            Expanded(
                              child: Text(
                                speakers,
                                style: TextStyle(
                                  color: Colors.grey[400],
                                  fontSize: 12,
                                ),
                              ),
                            ),
                          ],
                        ),
                      ],
                    ],
                  ),
                ),
              ],

              // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
              const SizedBox(height: 12),
              Row(
                children: [
                  if (zoomLink != null && zoomLink.isNotEmpty) ...[
                    SizedBox(
                      height: 28,
                      child: ElevatedButton.icon(
                        onPressed: () {
                          _openZoomLink(zoomLink!);
                        },
                        icon: const Icon(Icons.videocam, size: 14),
                        label: const Text(
                          '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Zoom',
                          style: TextStyle(fontSize: 11),
                        ),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: const Color(0xFF2D8CFF), // –°–∏–Ω–∏–π —Ü–≤–µ—Ç –¥–ª—è Zoom
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 0),
                          minimumSize: const Size(0, 28),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(6),
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(width: 8),
                  ],
                  const Spacer(),
                  Text(
                    _formatDate(createdAt),
                    style: TextStyle(
                      color: Colors.grey[500],
                      fontSize: 11,
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildUpcomingMeetings() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Padding(
          padding: EdgeInsets.all(16.0),
          child: Text(
            '–ë–ª–∏–∂–∞–π—à–∏–µ –≤—Å—Ç—Ä–µ—á–∏',
            style: TextStyle(
              color: Colors.white,
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        ListView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          itemCount: _upcomingMeetings.length,
          itemBuilder: (context, index) {
            final meeting = _upcomingMeetings[index];
            final isSoon = meeting.isToday && 
                DateTime.now().add(const Duration(hours: 2)).isAfter(DateTime.parse(meeting.startTime));
            
            return Container(
              margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: const Color(0xFF2D2D2D),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(
                  color: isSoon ? const Color(0xFF10B981) : const Color(0xFF374151),
                  width: 1,
                ),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          meeting.name,
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ),
                      if (isSoon)
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                          decoration: BoxDecoration(
                            color: const Color(0xFF10B981),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: const Text(
                            '–°–∫–æ—Ä–æ',
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 10,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                        ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Row(
                    children: [
                      Icon(
                        Icons.access_time,
                        color: Colors.grey[400],
                        size: 16,
                      ),
                      const SizedBox(width: 4),
                      Text(
                        '${meeting.formattedDate}, ${meeting.formattedStartTime}',
                        style: TextStyle(
                          color: Colors.grey[400],
                          fontSize: 14,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Row(
                    children: [
                      Icon(
                        Icons.group,
                        color: Colors.grey[400],
                        size: 16,
                      ),
                      const SizedBox(width: 4),
                      Text(
                        '${meeting.participantsCount}/${meeting.maxParticipants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
                        style: TextStyle(
                          color: Colors.grey[400],
                          fontSize: 14,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 12),
                  Row(
                    children: [
                      Expanded(
                        child: ElevatedButton(
                          onPressed: _isPremium ? () => _joinMeeting(meeting) : _showUpgradeDialog,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: const Color(0xFF8B5CF6),
                            foregroundColor: Colors.white,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                          ),
                          child: Text(
                            _isPremium ? '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è' : '–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ',
                            style: const TextStyle(fontSize: 14),
                          ),
                        ),
                      ),
                      const SizedBox(width: 8),
                      TextButton(
                        onPressed: () => _openMeeting(meeting),
                        child: const Text(
                          '–ü–æ–¥—Ä–æ–±–Ω–µ–µ',
                          style: TextStyle(color: Color(0xFF8B5CF6)),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            );
          },
        ),
      ],
    );
  }

  Widget _buildContinueWatching() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Padding(
          padding: EdgeInsets.all(16.0),
          child: Text(
            '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä',
            style: TextStyle(
              color: Colors.white,
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        SizedBox(
          height: 160,
          child: ListView.builder(
            scrollDirection: Axis.horizontal,
            padding: const EdgeInsets.symmetric(horizontal: 16.0),
            itemCount: _continueWatchingList.length,
                            itemBuilder: (context, index) {
              final video = _continueWatchingList[index];
              return Container(
                width: 200,
                margin: const EdgeInsets.only(right: 12),
                decoration: BoxDecoration(
                  color: const Color(0xFF2D2D2D),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Material(
                  color: Colors.transparent,
                  child: InkWell(
                    onTap: () => _openVideo(video),
                    borderRadius: BorderRadius.circular(12),
                    child: Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            children: [
                              const Icon(Icons.play_circle_filled, color: Color(0xFF8B5CF6), size: 20),
                              const Spacer(),
                              Text(
                                _getVideoProgressText(video.id),
                                style: TextStyle(
                                  color: Colors.grey[400],
                                  fontSize: 12,
                                ),
                              ),
                            ],
                          ),
                          const SizedBox(height: 8),
                          Text(
                            video.title,
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 14,
                              fontWeight: FontWeight.w600,
                            ),
                            maxLines: 2,
                            overflow: TextOverflow.ellipsis,
                          ),
                          const Spacer(),
                          Text(
                            video.formattedDuration,
                            style: TextStyle(
                              color: Colors.grey[400],
                              fontSize: 12,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              );
            },
          ),
        ),
      ],
    );
  }

  Widget _buildLatestNews() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Padding(
          padding: EdgeInsets.all(16.0),
          child: Text(
            '–°–≤–µ–∂–∞—è –Ω–æ–≤–æ—Å—Ç—å',
            style: TextStyle(
              color: Colors.white,
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        Container(
          margin: const EdgeInsets.symmetric(horizontal: 16),
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: const Color(0xFF2D2D2D),
            borderRadius: BorderRadius.circular(12),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                _latestNews.title,
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                _latestNews.excerpt,
                style: TextStyle(
                  color: Colors.grey[400],
                  fontSize: 14,
                ),
                maxLines: 3,
                overflow: TextOverflow.ellipsis,
              ),
              const SizedBox(height: 12),
              Row(
                children: [
                  Icon(
                    Icons.access_time,
                    color: Colors.grey[400],
                    size: 16,
                  ),
                  const SizedBox(width: 4),
                  Text(
                    _latestNews.formattedPublishedAt!,
                    style: TextStyle(
                      color: Colors.grey[400],
                      fontSize: 12,
                    ),
                  ),
                  const Spacer(),
                  TextButton(
                    onPressed: () => _openNews(_latestNews),
                    child: const Text(
                      '–ß–∏—Ç–∞—Ç—å',
                      style: TextStyle(color: Color(0xFF8B5CF6)),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildRecentNews() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Padding(
          padding: EdgeInsets.all(16.0),
          child: Text(
            '–ù–æ–≤–æ—Å—Ç–∏',
            style: TextStyle(
              color: Colors.white,
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        ListView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          itemCount: _recentNews.length,
          itemBuilder: (context, index) {
            final news = _recentNews[index];
            return Container(
              margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: const Color(0xFF2D2D2D),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    news.title,
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 14,
                      fontWeight: FontWeight.w600,
                    ),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                  const SizedBox(height: 8),
                  Row(
                    children: [
                      Icon(
                        Icons.access_time,
                        color: Colors.grey[400],
                        size: 14,
                      ),
                      const SizedBox(width: 4),
                      Text(
                        news.formattedPublishedAt!,
                        style: TextStyle(
                          color: Colors.grey[400],
                          fontSize: 12,
                        ),
                      ),
                      const Spacer(),
                      TextButton(
                        onPressed: () => _openNews(news),
                        child: const Text(
                          '–ß–∏—Ç–∞—Ç—å',
                          style: TextStyle(color: Color(0xFF8B5CF6), fontSize: 12),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            );
          },
        ),
      ],
    );
  }

  // Navigation methods
  void _openVideo(Video video) {
    // TODO: Navigate to video player
    print('Opening video: ${video.title}');
  }

  void _joinMeeting(Meeting meeting) {
    if (meeting.joinUrl != null) {
      // TODO: Open Zoom link
      print('Joining meeting: ${meeting.name}');
      print('Zoom URL: ${meeting.joinUrl}');
    } else {
      _showUpgradeDialog();
    }
  }

  void _openNews(News news) {
    // TODO: Navigate to news detail
    print('Opening news: ${news.title}');
  }

  void _openClub(Club club) {
    context.go('/clubs/${club.slug}');
  }

  void _openCourse(Course course) {
    context.go('/courses/${course.slug}');
  }

  void _openMeeting(Meeting meeting) {
    // TODO: Navigate to meeting detail
    print('Opening meeting: ${meeting.name}');
  }

  void _showUpgradeDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: const Color(0xFF2D2D2D),
        title: const Text(
          '–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ',
          style: TextStyle(color: Colors.white),
        ),
        content: const Text(
          '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ.',
          style: TextStyle(color: Colors.grey),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text(
              '–û—Ç–º–µ–Ω–∞',
              style: TextStyle(color: Colors.grey),
            ),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              // TODO: Navigate to subscription screen
              print('Navigate to subscription screen');
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFF8B5CF6),
              foregroundColor: Colors.white,
            ),
            child: const Text('–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ'),
          ),
        ],
      ),
    );
  }

  String _stripHtmlTags(String htmlString) {
    return htmlString
        .replaceAll(RegExp(r'<[^>]*>'), '')
        .replaceAll('&nbsp;', ' ')
        .replaceAll('&amp;', '&')
        .replaceAll('&lt;', '<')
        .replaceAll('&gt;', '>')
        .replaceAll('&quot;', '"')
        .replaceAll('&#39;', "'")
        .trim();
  }

  String _formatDate(String? dateString) {
    if (dateString == null) return '';
    try {
      final date = DateTime.parse(dateString);
      final now = DateTime.now();
      final difference = now.difference(date);

      if (difference.inDays == 0) {
        return '—Å–µ–≥–æ–¥–Ω—è';
      } else if (difference.inDays == 1) {
        return '–≤—á–µ—Ä–∞';
      } else if (difference.inDays < 7) {
        return '${difference.inDays} –¥–Ω. –Ω–∞–∑–∞–¥';
      } else {
        return '${date.day}.${date.month}.${date.year}';
      }
    } catch (e) {
      return '';
    }
  }

  String _formatEventDateTime(String? dateIso, String? startIso, String? endIso) {
    try {
      DateTime? date;
      DateTime? start;
      DateTime? end;

      if (dateIso != null && dateIso.isNotEmpty) {
        date = DateTime.tryParse(dateIso);
      }
      if (startIso != null && startIso.isNotEmpty) {
        start = DateTime.tryParse(startIso);
      }
      if (endIso != null && endIso.isNotEmpty) {
        end = DateTime.tryParse(endIso);
      }

      String? datePart;
      if (date != null) {
        final dd = date.day.toString().padLeft(2, '0');
        final mm = date.month.toString().padLeft(2, '0');
        final yyyy = date.year.toString();
        datePart = '$dd.$mm.$yyyy';
      }

      String? startPart;
      if (start != null) {
        final hh = start.hour.toString().padLeft(2, '0');
        final min = start.minute.toString().padLeft(2, '0');
        startPart = '$hh:$min';
      }

      String? endPart;
      if (end != null) {
        final hh = end.hour.toString().padLeft(2, '0');
        final min = end.minute.toString().padLeft(2, '0');
        endPart = '$hh:$min';
      }

      if (datePart == null && startPart == null && endPart == null) return '';

      // –°–±–æ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏: 24.09.2025 ‚Ä¢ 12:00‚Äì13:30
      final timePart = endPart != null && startPart != null
          ? '$startPart‚Äì$endPart'
          : (startPart ?? endPart);

      return [datePart, timePart].where((e) => e != null && e!.isNotEmpty).join(' ‚Ä¢ ');
    } catch (e) {
      return [dateIso, startIso].where((e) => e != null && e!.isNotEmpty).join(' ‚Ä¢ ');
    }
  }

  void _openZoomLink(String url) async {
    final uri = Uri.parse(url);
    if (await canLaunchUrl(uri)) {
      await launchUrl(uri, mode: LaunchMode.externalApplication);
    } else {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É Zoom'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
}
