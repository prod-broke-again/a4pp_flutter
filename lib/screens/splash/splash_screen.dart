import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:mobile/blocs/auth/auth_bloc.dart';
import 'package:mobile/services/preload_service.dart';
import 'dart:math' as math;

class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _scaleAnimation;
  late Animation<double> _opacityAnimation;
  late Animation<double> _rotationAnimation;
  late Animation<Color?> _colorAnimation;

  bool _animationCompleted = false;
  bool _preloadCompleted = false;
  PreloadedData? _preloadedData;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(seconds: 3),
      vsync: this,
    );

    // –ê–Ω–∏–º–∞—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∞ (–æ—Ç 0.3 –¥–æ 1.0)
    _scaleAnimation = Tween<double>(
      begin: 0.3,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.elasticOut,
    ));

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ (–æ—Ç 0.0 –¥–æ 1.0)
    _opacityAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: const Interval(0.0, 0.7, curve: Curves.easeIn),
    ));

    // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è (–Ω–µ–±–æ–ª—å—à–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ)
    _rotationAnimation = Tween<double>(
      begin: -0.1,
      end: 0.0,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.elasticOut,
    ));

    // –ê–Ω–∏–º–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ (–æ—Ç —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ –∫ –±–µ–ª–æ–º—É)
    _colorAnimation = ColorTween(
      begin: const Color(0xFF6B46C1),
      end: Colors.white,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: const Interval(0.3, 1.0, curve: Curves.easeInOut),
    ));

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    _controller.addStatusListener((status) {
      if (status == AnimationStatus.completed) {
        setState(() {
          _animationCompleted = true;
        });
        // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        _checkAuthAfterAnimation();
      }
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    _startPreloading();

    _controller.forward();
  }

  /// –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  void _startPreloading() async {
    print('üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...');
    try {
      final preloadService = PreloadService();
      _preloadedData = await preloadService.preloadHomeData();
      if (mounted) {
        setState(() {
          _preloadCompleted = true;
        });
        print('‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: $e');
      // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
      if (mounted) {
        setState(() {
          _preloadCompleted = true;
          _preloadedData = PreloadedData.empty();
        });
      }
    }
  }

  void _checkAuthAfterAnimation() {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    Future.delayed(const Duration(milliseconds: 500), () {
      if (mounted) {
        // –ü–æ–ª—É—á–∞–µ–º AuthBloc –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        final authBloc = context.read<AuthBloc>();
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞
        authBloc.add(AuthCheckTokenRequested());
      }
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<AuthBloc, AuthState>(
      listener: (context, state) {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        if (_animationCompleted) {
          if (state is AuthTokenValid) {
            // –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.goNamed('home', extra: _preloadedData);
          } else if (state is AuthInitial) {
            context.goNamed('login');
          }
        }
      },
      child: Scaffold(
        body: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                Color(0xFF1A1A1A), // –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π
                Color(0xFF2D2D2D), // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
                Color(0xFF1A1A1A), // –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π
              ],
            ),
          ),
          child: Stack(
            children: [
              // –§–æ–Ω–æ–≤—ã–µ –∫—Ä—É–≥–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
              Positioned.fill(
                child: AnimatedBuilder(
                  animation: _controller,
                  builder: (context, child) {
                    return CustomPaint(
                      painter: BackgroundCirclesPainter(
                        progress: _controller.value,
                      ),
                    );
                  },
                ),
              ),

              // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
              Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø/–∏–∫–æ–Ω–∫–∞
                    AnimatedBuilder(
                      animation: _controller,
                      builder: (context, child) {
                        return Transform.scale(
                          scale: _scaleAnimation.value,
                          child: Transform.rotate(
                            angle: _rotationAnimation.value,
                            child: Opacity(
                              opacity: _opacityAnimation.value,
                              child: Image.asset(
                                'logo.png',
                                width: 80,
                                height: 80,
                                fit: BoxFit.contain,
                              ),
                            ),
                          ),
                        );
                      },
                    ),

                    const SizedBox(height: 32),

                    // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                    AnimatedBuilder(
                      animation: _controller,
                      builder: (context, child) {
                        return Opacity(
                          opacity: _opacityAnimation.value,
                          child: Column(
                            children: [
                              Text(
                                '–ê–ß–ü–ü',
                                style: TextStyle(
                                  fontSize: 32,
                                  fontWeight: FontWeight.bold,
                                  color: _colorAnimation.value ?? Colors.white,
                                  letterSpacing: 2,
                                ),
                              ),
                              const SizedBox(height: 12),
                              Text(
                                '–ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è —á–∞—Å—Ç–Ω–æ–ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏—Ö\n–ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ –∏ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–≤',
                                style: TextStyle(
                                  fontSize: 14,
                                  color: Colors.grey[400],
                                  letterSpacing: 0.5,
                                  height: 1.3,
                                ),
                                textAlign: TextAlign.center,
                              ),
                            ],
                          ),
                        );
                      },
                    ),

                    const SizedBox(height: 64),

                    // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                    AnimatedBuilder(
                      animation: _controller,
                      builder: (context, child) {
                        return Opacity(
                          opacity: _opacityAnimation.value,
                          child: SizedBox(
                            width: 40,
                            height: 40,
                            child: CircularProgressIndicator(
                              valueColor: AlwaysStoppedAnimation<Color>(
                                _colorAnimation.value ?? const Color(0xFF6B46C1),
                              ),
                              strokeWidth: 3,
                            ),
                          ),
                        );
                      },
                    ),
                  ],
                ),
              ),

              // –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
              Positioned(
                top: 100,
                left: 50,
                child: AnimatedBuilder(
                  animation: _controller,
                  builder: (context, child) {
                    return Opacity(
                      opacity: _opacityAnimation.value * 0.3,
                      child: Container(
                        width: 20,
                        height: 20,
                        decoration: const BoxDecoration(
                          shape: BoxShape.circle,
                          color: Color(0xFF6B46C1),
                        ),
                      ),
                    );
                  },
                ),
              ),

              Positioned(
                bottom: 150,
                right: 70,
                child: AnimatedBuilder(
                  animation: _controller,
                  builder: (context, child) {
                    return Opacity(
                      opacity: _opacityAnimation.value * 0.2,
                      child: Container(
                        width: 15,
                        height: 15,
                        decoration: const BoxDecoration(
                          shape: BoxShape.circle,
                          color: Color(0xFF8B5CF6),
                        ),
                      ),
                    );
                  },
                ),
              ),

              Positioned(
                bottom: 100,
                left: 100,
                child: AnimatedBuilder(
                  animation: _controller,
                  builder: (context, child) {
                    return Opacity(
                      opacity: _opacityAnimation.value * 0.25,
                      child: Container(
                        width: 25,
                        height: 25,
                        decoration: const BoxDecoration(
                          shape: BoxShape.circle,
                          color: Color(0xFF6B46C1),
                        ),
                      ),
                    );
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// –ö–∞—Å—Ç–æ–º–Ω—ã–π painter –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∫—Ä—É–≥–æ–≤
class BackgroundCirclesPainter extends CustomPainter {
  final double progress;

  BackgroundCirclesPainter({required this.progress});

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..style = PaintingStyle.stroke
      ..strokeWidth = 2.0
      ..color = const Color(0xFF6B46C1).withOpacity(0.1 * progress);

    // –†–∏—Å—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä—É–≥–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–¥–∏—É—Å–∞–º–∏
    final center = Offset(size.width / 2, size.height / 2);
    final maxRadius = math.min(size.width, size.height) * 0.4;

    for (int i = 1; i <= 3; i++) {
      final radius = maxRadius * (0.3 + i * 0.2) * progress;
      canvas.drawCircle(center, radius, paint);
    }
  }

  @override
  bool shouldRepaint(BackgroundCirclesPainter oldDelegate) {
    return oldDelegate.progress != progress;
  }
}
