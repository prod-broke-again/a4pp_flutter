import 'package:mobile/models/blog.dart';
import 'package:mobile/models/comment.dart';
import 'package:mobile/repositories/blog_repository.dart';
import 'package:mobile/services/comment_service.dart';

class BlogService {
  final BlogRepository _repository;
  final CommentService _commentService;

  BlogService({BlogRepository? repository})
      : _repository = repository ?? BlogRepository(),
        _commentService = CommentService();

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –±–ª–æ–≥–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
  Future<({
    List<Blog> posts,
    Map<String, dynamic> pagination,
  })> getBlogPosts({
    int page = 1,
    int perPage = 15,
    String? search,
    String? category,
    String? status,
    String? sort,
    String? order,
  }) async {
    final data = await _repository.getBlogPosts(
      page: page,
      perPage: perPage,
      search: search,
      category: category,
      status: status,
      sort: sort,
      order: order,
    );

    // –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –æ—Ç API –≤ –∫–æ–Ω—Å–æ–ª—å
    print('üîç BLOG API Response: $data');

    final posts = (data['blogs'] as List<dynamic>? ?? [])
        .map((json) => Blog.fromJson(json))
        .toList();
    final pagination = Map<String, dynamic>.from(data['pagination'] as Map? ?? {});

    return (posts: posts, pagination: pagination);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é –±–ª–æ–≥–∞ –ø–æ —Å–ª–∞–≥—É
  Future<Blog> getBlogPost(String slug) async {
    final data = await _repository.getBlogPost(slug);

    // –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –æ—Ç API –≤ –∫–æ–Ω—Å–æ–ª—å
    print('üîç BLOG POST API Response: $data');

    return Blog.fromJson(data['post'] ?? data);
  }

  /// –õ–∞–π–∫ —Å—Ç–∞—Ç—å–∏
  Future<({
    bool isLiked,
    bool isDisliked,
    int likesCount,
    int dislikesCount,
  })> likeBlogPost(String slug) async {
    final data = await _repository.likeBlogPost(slug);
    return (
      isLiked: data['is_liked'] as bool? ?? false,
      isDisliked: data['is_disliked'] as bool? ?? false,
      likesCount: data['likes_count'] as int? ?? 0,
      dislikesCount: data['dislikes_count'] as int? ?? 0,
    );
  }

  /// –î–∏–∑–ª–∞–π–∫ —Å—Ç–∞—Ç—å–∏
  Future<({
    bool isLiked,
    bool isDisliked,
    int likesCount,
    int dislikesCount,
  })> dislikeBlogPost(String slug) async {
    final data = await _repository.dislikeBlogPost(slug);
    return (
      isLiked: data['is_liked'] as bool? ?? false,
      isDisliked: data['is_disliked'] as bool? ?? false,
      likesCount: data['likes_count'] as int? ?? 0,
      dislikesCount: data['dislikes_count'] as int? ?? 0,
    );
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å—Ç–∞—Ç—å–∏ –±–ª–æ–≥–∞
  Future<({
    List<Comment> comments,
    Map<String, dynamic> pagination,
  })> getBlogComments(String slug, {int page = 1, int perPage = 15}) async {
    return _commentService.getComments('blogs', slug, page: page, perPage: perPage);
  }

  /// –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å—Ç–∞—Ç—å–µ –±–ª–æ–≥–∞
  Future<Comment> addBlogComment(String slug, String content) async {
    return _commentService.addComment('blogs', slug, content);
  }

  /// –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –±–ª–æ–≥–µ
  Future<Comment> replyToBlogComment(String slug, int commentId, String content) async {
    return _commentService.replyToComment('blogs', slug, commentId, content);
  }

  /// –õ–∞–π–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –±–ª–æ–≥–µ
  Future<Map<String, dynamic>> toggleBlogCommentLike(int commentId) async {
    return _commentService.toggleCommentLike(commentId);
  }
}
