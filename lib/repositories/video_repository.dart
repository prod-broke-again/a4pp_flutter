import 'package:dio/dio.dart';
import 'package:achpp/services/api_client.dart';

class VideoRepository {
  final ApiClient _apiClient;

  VideoRepository({ApiClient? apiClient})
      : _apiClient = apiClient ?? ApiClient();

  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)
  Future<Map<String, dynamic>> getContinueWatchingVideos({int limit = 3}) async {
    try {
      print('üì° VIDEO API: –ó–∞–ø—Ä–æ—Å GET /videos –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ)');
      final response = await _apiClient.dio.get('/videos', queryParameters: {
        'per_page': limit,
        'sort_by': 'view_count',
        'sort_direction': 'desc',
        'is_free': false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—Ç–Ω—ã–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      });
      print('üì° VIDEO API: –û—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      if (response.statusCode == 200 && response.data['success'] == true) {
        return Map<String, dynamic>.from(response.data['data']);
      }
      print('‚ùå VIDEO API: –ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      throw Exception(response.data['message'] ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è');
    } on DioException catch (e) {
      print('‚ùå VIDEO API: DioException - —Ç–∏–ø ${e.type}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${e.message}');
      print('‚ùå VIDEO API: –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${e.response?.statusCode}');
      final normalized = e.error;
      if (normalized is Object) return Future.error(normalized.toString());
      return Future.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
  Future<Map<String, dynamic>> getLatestVideo() async {
    try {
      print('üì° VIDEO API: –ó–∞–ø—Ä–æ—Å GET /videos –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–¥–µ–æ');
      final response = await _apiClient.dio.get('/videos', queryParameters: {
        'per_page': 1,
        'sort_by': 'published_at',
        'sort_direction': 'desc',
      });
      print('üì° VIDEO API: –û—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      if (response.statusCode == 200 && response.data['success'] == true) {
        return Map<String, dynamic>.from(response.data['data']);
      }
      print('‚ùå VIDEO API: –ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      throw Exception(response.data['message'] ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ');
    } on DioException catch (e) {
      print('‚ùå VIDEO API: DioException - —Ç–∏–ø ${e.type}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${e.message}');
      print('‚ùå VIDEO API: –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${e.response?.statusCode}');
      final normalized = e.error;
      if (normalized is Object) return Future.error(normalized.toString());
      return Future.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∏–¥–µ–æ (–∫–æ—Ä–Ω–µ–≤—ã–µ –ø–∞–ø–∫–∏)
  Future<Map<String, dynamic>> getVideoCategories() async {
    try {
      print('üì° VIDEO API: –ó–∞–ø—Ä–æ—Å GET /v2/videos/categories');
      final response = await _apiClient.dio.get('/v2/videos/categories');
      print('üì° VIDEO API: –û—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      if (response.statusCode == 200 && response.data['success'] == true) {
        return Map<String, dynamic>.from(response.data['data']);
      }
      print('‚ùå VIDEO API: –ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      throw Exception(response.data['message'] ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∏–¥–µ–æ');
    } on DioException catch (e) {
      print('‚ùå VIDEO API: DioException - —Ç–∏–ø ${e.type}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${e.message}');
      print('‚ùå VIDEO API: –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${e.response?.statusCode}');
      final normalized = e.error;
      if (normalized is Object) return Future.error(normalized.toString());
      return Future.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  Future<Map<String, dynamic>> getVideoCategorySubcategories(int categoryId) async {
    try {
      print('üì° VIDEO API: –ó–∞–ø—Ä–æ—Å GET /v2/videos/categories/$categoryId/subcategories');
      final response = await _apiClient.dio.get('/v2/videos/categories/$categoryId/subcategories');
      print('üì° VIDEO API: –û—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      if (response.statusCode == 200 && response.data['success'] == true) {
        return Map<String, dynamic>.from(response.data['data']);
      }
      print('‚ùå VIDEO API: –ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      throw Exception(response.data['message'] ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    } on DioException catch (e) {
      print('‚ùå VIDEO API: DioException - —Ç–∏–ø ${e.type}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${e.message}');
      print('‚ùå VIDEO API: –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${e.response?.statusCode}');
      final normalized = e.error;
      if (normalized is Object) return Future.error(normalized.toString());
      return Future.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∫–æ—Ä–Ω–µ–≤–æ–π –∏–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
  Future<Map<String, dynamic>> getVideoCategory(String categorySlug, {String? search, int page = 1, int perPage = 15}) async {
    try {
      final queryParams = <String, dynamic>{
        'page': page,
        'per_page': perPage,
      };
      if (search != null && search.isNotEmpty) {
        queryParams['search'] = search;
      }

      print('üì° VIDEO API: –ó–∞–ø—Ä–æ—Å GET /v2/videos/category/$categorySlug —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: $queryParams');
      final response = await _apiClient.dio.get(
        '/v2/videos/category/$categorySlug',
        queryParameters: queryParams,
      );
      print('üì° VIDEO API: –û—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      if (response.statusCode == 200 && response.data['success'] == true) {
        return Map<String, dynamic>.from(response.data['data']);
      }
      print('‚ùå VIDEO API: –ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      throw Exception(response.data['message'] ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    } on DioException catch (e) {
      print('‚ùå VIDEO API: DioException - —Ç–∏–ø ${e.type}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${e.message}');
      print('‚ùå VIDEO API: –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${e.response?.statusCode}');
      final normalized = e.error;
      if (normalized is Object) return Future.error(normalized.toString());
      return Future.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
  Future<Map<String, dynamic>> getVideos({String? search, int? videoFolderId, int page = 1, int perPage = 15}) async {
    try {
      final queryParams = <String, dynamic>{
        'page': page,
        'per_page': perPage,
      };
      if (search != null && search.isNotEmpty) {
        queryParams['search'] = search;
      }
      if (videoFolderId != null) {
        queryParams['video_folder_id'] = videoFolderId;
      }

      print('üì° VIDEO API: –ó–∞–ø—Ä–æ—Å GET /v2/videos —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: $queryParams');
      final response = await _apiClient.dio.get(
        '/v2/videos',
        queryParameters: queryParams,
      );
      print('üì° VIDEO API: –û—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      if (response.statusCode == 200 && response.data['success'] == true) {
        return Map<String, dynamic>.from(response.data['data']);
      }
      print('‚ùå VIDEO API: –ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      throw Exception(response.data['message'] ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ');
    } on DioException catch (e) {
      print('‚ùå VIDEO API: DioException - —Ç–∏–ø ${e.type}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${e.message}');
      print('‚ùå VIDEO API: –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${e.response?.statusCode}');
      final normalized = e.error;
      if (normalized is Object) return Future.error(normalized.toString());
      return Future.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤–∏–¥–µ–æ
  Future<Map<String, dynamic>> getVideo(String slug) async {
    try {
      print('üì° VIDEO API: –ó–∞–ø—Ä–æ—Å GET /v2/videos/$slug');
      final response = await _apiClient.dio.get('/v2/videos/$slug');
      print('üì° VIDEO API: –û—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      if (response.statusCode == 200 && response.data['success'] == true) {
        return Map<String, dynamic>.from(response.data['data']);
      }
      print('‚ùå VIDEO API: –ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      throw Exception(response.data['message'] ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ');
    } on DioException catch (e) {
      print('‚ùå VIDEO API: DioException - —Ç–∏–ø ${e.type}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${e.message}');
      print('‚ùå VIDEO API: –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${e.response?.statusCode}');
      final normalized = e.error;
      if (normalized is Object) return Future.error(normalized.toString());
      return Future.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –∏–∑ –ø–∞–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  Future<Map<String, dynamic>> getVideoNavigation(String slug) async {
    try {
      print('üì° VIDEO API: –ó–∞–ø—Ä–æ—Å GET /v2/videos/$slug/folder-videos');
      final response = await _apiClient.dio.get('/v2/videos/$slug/folder-videos');
      print('üì° VIDEO API: –û—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      if (response.statusCode == 200 && response.data['success'] == true) {
        return Map<String, dynamic>.from(response.data['data']);
      }
      print('‚ùå VIDEO API: –ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      throw Exception(response.data['message'] ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é');
    } on DioException catch (e) {
      print('‚ùå VIDEO API: DioException - —Ç–∏–ø ${e.type}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${e.message}');
      print('‚ùå VIDEO API: –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${e.response?.statusCode}');
      final normalized = e.error;
      if (normalized is Object) return Future.error(normalized.toString());
      return Future.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
    }
  }

  /// –ü–æ—Å—Ç–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –ª–∞–π–∫ –≤–∏–¥–µ–æ
  Future<Map<String, dynamic>> toggleVideoLike(String slug) async {
    try {
      print('üì° VIDEO API: –ó–∞–ø—Ä–æ—Å POST /v2/videos/$slug/like');
      final response = await _apiClient.dio.post('/v2/videos/$slug/like');
      print('üì° VIDEO API: –û—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      if (response.statusCode == 200 && response.data['success'] == true) {
        return Map<String, dynamic>.from(response.data['data']);
      }
      print('‚ùå VIDEO API: –ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      throw Exception(response.data['message'] ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ');
    } on DioException catch (e) {
      print('‚ùå VIDEO API: DioException - —Ç–∏–ø ${e.type}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${e.message}');
      print('‚ùå VIDEO API: –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${e.response?.statusCode}');
      final normalized = e.error;
      if (normalized is Object) return Future.error(normalized.toString());
      return Future.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
    }
  }

  /// –ü–æ—Å—Ç–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –¥–∏–∑–ª–∞–π–∫ –≤–∏–¥–µ–æ
  Future<Map<String, dynamic>> toggleVideoDislike(String slug) async {
    try {
      print('üì° VIDEO API: –ó–∞–ø—Ä–æ—Å POST /v2/videos/$slug/dislike');
      final response = await _apiClient.dio.post('/v2/videos/$slug/dislike');
      print('üì° VIDEO API: –û—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      if (response.statusCode == 200 && response.data['success'] == true) {
        return Map<String, dynamic>.from(response.data['data']);
      }
      print('‚ùå VIDEO API: –ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      throw Exception(response.data['message'] ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ');
    } on DioException catch (e) {
      print('‚ùå VIDEO API: DioException - —Ç–∏–ø ${e.type}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${e.message}');
      print('‚ùå VIDEO API: –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${e.response?.statusCode}');
      final normalized = e.error;
      if (normalized is Object) return Future.error(normalized.toString());
      return Future.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ
  Future<Map<String, dynamic>> trackVideoView(String slug) async {
    try {
      print('üì° VIDEO API: –ó–∞–ø—Ä–æ—Å POST /v2/videos/$slug/views');
      final response = await _apiClient.dio.post('/v2/videos/$slug/views');
      print('üì° VIDEO API: –û—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      if (response.statusCode == 200 && response.data['success'] == true) {
        final data = response.data['data'];
        if (data is Map<String, dynamic>) {
          return Map<String, dynamic>.from(data);
        }
        // API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å data = null, —Ç–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º –ø—É—Å—Ç—É—é map
        return <String, dynamic>{};
      }
      print('‚ùå VIDEO API: –ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      throw Exception(response.data['message'] ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä');
    } on DioException catch (e) {
      print('‚ùå VIDEO API: DioException - —Ç–∏–ø ${e.type}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${e.message}');
      print('‚ùå VIDEO API: –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${e.response?.statusCode}');
      final normalized = e.error;
      if (normalized is Object) return Future.error(normalized.toString());
      return Future.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
    }
  }
}
